#ifndef _MODEL_H_
#define _MODEL_H_

#include <glad/glad.h>
#include <glm/glm.hpp>
#include <vector>
#include "texture.hpp"

static const GLfloat cube_vertices[] = {
    -1.0f,-1.0f,-1.0f, // triangle 1 : begin
    -1.0f,-1.0f, 1.0f,
    -1.0f, 1.0f, 1.0f, // triangle 1 : end
    1.0f, 1.0f,-1.0f, // triangle 2 : begin
    -1.0f,-1.0f,-1.0f,
    -1.0f, 1.0f,-1.0f, // triangle 2 : end
    1.0f,-1.0f, 1.0f,
    -1.0f,-1.0f,-1.0f,
    1.0f,-1.0f,-1.0f,
    1.0f, 1.0f,-1.0f,
    1.0f,-1.0f,-1.0f,
    -1.0f,-1.0f,-1.0f,
    -1.0f,-1.0f,-1.0f,
    -1.0f, 1.0f, 1.0f,
    -1.0f, 1.0f,-1.0f,
    1.0f,-1.0f, 1.0f,
    -1.0f,-1.0f, 1.0f,
    -1.0f,-1.0f,-1.0f,
    -1.0f, 1.0f, 1.0f,
    -1.0f,-1.0f, 1.0f,
    1.0f,-1.0f, 1.0f,
    1.0f, 1.0f, 1.0f,
    1.0f,-1.0f,-1.0f,
    1.0f, 1.0f,-1.0f,
    1.0f,-1.0f,-1.0f,
    1.0f, 1.0f, 1.0f,
    1.0f,-1.0f, 1.0f,
    1.0f, 1.0f, 1.0f,
    1.0f, 1.0f,-1.0f,
    -1.0f, 1.0f,-1.0f,
    1.0f, 1.0f, 1.0f,
    -1.0f, 1.0f,-1.0f,
    -1.0f, 1.0f, 1.0f,
    1.0f, 1.0f, 1.0f,
    -1.0f, 1.0f, 1.0f,
    1.0f,-1.0f, 1.0f
};

static const GLfloat cube_vertex_colors[] = {
    1,  0,  0,
    0,  1,  0,
    0,  0,  1,
    1,  0,  0,
    0,  1,  0,
    0,  0,  1,

    1,  0,  0,
    0,  1,  0,
    0,  0,  1,
    1,  0,  0,
    0,  1,  0,
    0,  0,  1,

    1,  0,  0,
    0,  1,  0,
    0,  0,  1,
    1,  0,  0,
    0,  1,  0,
    0,  0,  1,

    1,  0,  0,
    0,  1,  0,
    0,  0,  1,
    1,  0,  0,
    0,  1,  0,
    0,  0,  1,

    1,  0,  0,
    0,  1,  0,
    0,  0,  1,
    1,  0,  0,
    0,  1,  0,
    0,  0,  1,

    1,  0,  0,
    0,  1,  0,
    0,  0,  1,
    1,  0,  0,
    0,  1,  0,
    0,  0,  1,
};

static const GLfloat cube_uvs[] = {
    0, 0,
    1, 1,
    1, 0,
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,
    0, 0,
    0, 1,
    1, 1,    
    0, 0,
    1, 1,
    1, 0,
    0, 0,
    0, 1,
    1, 1,    
    0, 0,
    1, 1,
    1, 0,
    0, 0,
    0, 1,
    1, 1,   
    0, 0,
    1, 1,
    1, 0,
    0, 0,
    0, 1,
    1, 1,    
    0, 0,
    1, 1,
    1, 0,
    0, 0,
    0, 1,
    1, 1,
    // 0.000059f, 1.0f-0.000004f,
    // 0.000103f, 1.0f-0.336048f,
    // 0.335973f, 1.0f-0.335903f,
    // 1.000023f, 1.0f-0.000013f,
    // 0.667979f, 1.0f-0.335851f,
    // 0.999958f, 1.0f-0.336064f,
    // 0.667979f, 1.0f-0.335851f,
    // 0.336024f, 1.0f-0.671877f,
    // 0.667969f, 1.0f-0.671889f,
    // 1.000023f, 1.0f-0.000013f,
    // 0.668104f, 1.0f-0.000013f,
    // 0.667979f, 1.0f-0.335851f,
    // 0.000059f, 1.0f-0.000004f,
    // 0.335973f, 1.0f-0.335903f,
    // 0.336098f, 1.0f-0.000071f,
    // 0.667979f, 1.0f-0.335851f,
    // 0.335973f, 1.0f-0.335903f,
    // 0.336024f, 1.0f-0.671877f,
    // 1.000004f, 1.0f-0.671847f,
    // 0.999958f, 1.0f-0.336064f,
    // 0.667979f, 1.0f-0.335851f,
    // 0.668104f, 1.0f-0.000013f,
    // 0.335973f, 1.0f-0.335903f,
    // 0.667979f, 1.0f-0.335851f,
    // 0.335973f, 1.0f-0.335903f,
    // 0.668104f, 1.0f-0.000013f,
    // 0.336098f, 1.0f-0.000071f,
    // 0.000103f, 1.0f-0.336048f,
    // 0.000004f, 1.0f-0.671870f,
    // 0.336024f, 1.0f-0.671877f,
    // 0.000103f, 1.0f-0.336048f,
    // 0.336024f, 1.0f-0.671877f,
    // 0.335973f, 1.0f-0.335903f,
    // 0.667969f, 1.0f-0.671889f,
    // 1.000004f, 1.0f-0.671847f,
    // 0.667979f, 1.0f-0.335851f
};

class Model
{
private:
public:
Model();
~Model();
    glm::mat4 transform;

    std::vector<glm::vec3> vertices, normals;
    std::vector<uint> indices;
    std::vector<glm::vec2> uvs;
    
    Texture texture;
};




#endif